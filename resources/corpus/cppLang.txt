cpp,CppLanguage
/**
 * @file main.cpp
 * @author Marc S. Ressl, Albertina Galan, Alejandro Nahuel Heir
 * @brief Language identification based on trigrams.
 * @version 0.1
 * @date 2022-03-29
 *
 * @copyright Copyright (c) 2022
 *
 */

#include <iostream>
#include <map>

#include "raylib.h"
#include "LanguageManager.h"

using namespace std;

enum OPERATION_MODES
{
    TRANSLATE,
    ADD_LANGUAGE
};

// TODO: revisar si quedaron txts o csvs dando vueltas por el directorio del proyecto
// TODO: revisar funcionamiento y que agregue a languagecode_names_es.csv
// TODO: optimizar la funcion que devuelve los 3 idiomas mas probables

int main(int, char *[])
{
    map<string, string> languageCodeNames;
    Languages languages;

    if (!loadLanguagesData(languageCodeNames, languages))
    {
        cout << "Could not load trigram data." << endl;
        return 1;
    }

    int screenWidth = 800;
    int screenHeight = 450;

    InitWindow(screenWidth, screenHeight, "Lequel?");

    SetTargetFPS(60);

    string languageCodes[3] = {"---", "---", "---"};

    int lequelMode = TRANSLATE;
    string operationResult;

    while (!WindowShouldClose())
    {
        if (IsKeyPressed(KEY_T))
            lequelMode = TRANSLATE;
        else if (IsKeyPressed(KEY_A))
            lequelMode = ADD_LANGUAGE;

        switch (lequelMode)
        {
        case TRANSLATE:
        {
            if (IsKeyPressed(KEY_V) &&
                (IsKeyDown(KEY_LEFT_CONTROL) ||
                 IsKeyDown(KEY_RIGHT_CONTROL) ||
                 IsKeyDown(KEY_LEFT_SUPER) ||
                 IsKeyDown(KEY_RIGHT_SUPER)))
            {
                const char *clipboard = GetClipboardText();

                Text text;
                getText(clipboard, text);

                identifyLanguage(text, languages, languageCodes);
            }

            if (IsFileDropped())
            {
                int count;
                char **droppedFiles = {0};
                droppedFiles = GetDroppedFiles(&count);

                Text text;
                getTextFromFile(droppedFiles[0], text);

                identifyLanguage(text, languages, languageCodes);

                ClearDroppedFiles();
            }

            BeginDrawing();

            ClearBackground(BEIGE);

            DrawText("Lequel?",
                     80, 80, 128, BROWN);
            DrawText("Copia y pega con Ctrl+V, o arrastra un archivo...",
                     80, 220, 24, BROWN);
            DrawText("... o presione A para agregar un idioma.",
                     80, 250, 24, BROWN);

            string languageStrings[3];
            for (int i = 0; i < 3; i++)
            {
                if (languageCodes[i] != "---")
                {
                    if (languageCodeNames.find(languageCodes[i]) != languageCodeNames.end())
                        languageStrings[i] = languageCodeNames[languageCodes[i]];

                    else
                        languageStrings[i] = "Desconocido";
                }
            }

            for (int i = 0; i < 3; i++)
            {
                int languageStringWidth = MeasureText(languageStrings[i].c_str(), 48 / (i + 1));

                DrawText(languageStrings[i].c_str(), (screenWidth - languageStringWidth) / 2,
                         315 + 140 * i / (i + 1), 48 / (i + 1), BROWN);
            }
            EndDrawing();

            break;
        }

        case ADD_LANGUAGE:
        {
            if (IsFileDropped())
            {
                int count;
                char **droppedFiles = {0};
                droppedFiles = GetDroppedFiles(&count);

                Text text;
                getTextFromFile(droppedFiles[0], text);

                ClearDroppedFiles();

                string languageIdentifier = text.front();
                text.pop_front();

                string languageName, languageCode;

                if (verifyNewLanguage(languageCodeNames, languageIdentifier, languageCode,
                                       languageName, operationResult))
                {
                    addLanguage(text, languageCodeNames, languages, languageCode, languageName,
                                operationResult);
                }
            }

            BeginDrawing();

            ClearBackground(BEIGE);

            DrawText("Lequel?",
                     80, 80, 128, BROWN);
            DrawText("Arrastra un corpus en algún idioma para agregarlo:",
                     80, 220, 24, BROWN);
            DrawText("La primera linea debe tener una identificacion del idioma:",
                     80, 250, 24, BROWN);
            DrawText("código-del-idioma-3-caracteres,nombre-del-idioma ",
                     80, 280, 20, RED);
            DrawText("Para volver al modo de traducción, presione T",
                     80, 310, 24, BROWN);

            DrawText(operationResult.data(),
                     80, 340, 24, BROWN);

            EndDrawing();

            break;
        }

        default:

            break;
        }
    }

    CloseWindow();

    return 0;
}
/**
 * @file LanguageManager.cpp
 * @author Marc S. Ressl, Albertina Galan, Alejandro Nahuel Heir
 * @brief Administrador de lenguajes, para agregarlos y detectar existentes.
 * @version 0.1
 * @date 2022-03-29
 *
 * @copyright Copyright (c) 2022
 *
 */

#include <algorithm>
#include <iostream>

#include "LanguageManager.h"

using namespace std;

const string LANGUAGECODE_NAMES_FILE = "resources/languagecode_names_es.csv";
const string TRIGRAMS_PATH = "resources/trigrams/";

bool loadLanguagesData(map<string, string> &languageCodeNames, Languages &languages)
{
    // Reads available language codes
    cout << "Reading language codes..." << endl;

    CSVData languageCodesCSVData;
    if (!readCSV(LANGUAGECODE_NAMES_FILE, languageCodesCSVData))
        return false;

    // Reads trigram profile for each language code
    for (auto fields : languageCodesCSVData)
    {
        if (fields.size() != 2)
            continue;

        string languageCode = fields[0];
        string languageName = fields[1];

        languageCodeNames[languageCode] = languageName;

        cout << "Reading trigram profile for language code \"" << languageCode << "\"..." << endl;

        CSVData languageCSVData;
        if (!readCSV(TRIGRAMS_PATH + languageCode + ".csv", languageCSVData))
            return false;

        languages.push_back(Language());
        Language &language = languages.back();

        language.languageCode = languageCode;

        for (auto fields : languageCSVData)
        {
            if (fields.size() != 2)
                continue;

            string trigram = fields[0];
            float frequency = (float)stoi(fields[1]);

            language.trigramProfile[trigram] = frequency;
        }

        normalizeTrigramProfile(language.trigramProfile);
    }

    return true;
}

void addLanguage(const Text &text, map<string, string> &languageCodeNames,
                 Languages &languages, const string &languageCode,
                 const string &languageName, string &result)
{
    // Se crea el trigramProfile del texto nuevo, y se escribe su .csv
    TrigramProfile trigramProfileHandler = buildTrigramProfile(text);

    CSVData csvDataHandler;
    for (auto profile : trigramProfileHandler)
    {
        csvDataHandler.push_front({profile.first, to_string((int)profile.second)});
    }

    csvDataHandler.sort(compareTrigramByFreq);
    writeCSV(TRIGRAMS_PATH + languageCode + ".csv", csvDataHandler);
    // Se crea el trigramProfile del texto nuevo, y se escribe su .csv

    // Se agrega al mapa
    languageCodeNames[languageCode] = languageName;
    // Se agrega al mapa

    // Se escribe el nuevo csv con el nuevo idoma, ordenándolo alfabéticamente
    csvDataHandler.clear();
    for (auto profile : languageCodeNames)
    {
        csvDataHandler.push_front({profile.first, profile.second});
    }

    csvDataHandler.sort();
    writeCSV(LANGUAGECODE_NAMES_FILE, csvDataHandler);
    // Se escribe el nuevo csv con el nuevo idoma, ordenándolo alfabéticamente

    // Se actualiza la lista de idiomas que usa main
    Language newLanguage;
    newLanguage.languageCode = languageCode;
    newLanguage.trigramProfile = trigramProfileHandler;
    languages.push_back(newLanguage);
    // Se actualiza la lista de idiomas que usa main

    result = "Se agregó: " + languageName;
}

bool verifyNewLanguage(const map<string, string> &languageCodeNames,
                       const string &languageIdentifier, string &languageCode,
                       string &languageName, string &output)
{
    bool error = false;

    if (languageIdentifier[3] == ',')
    {

        languageCode = languageIdentifier.substr(0, 3);
        auto iteratorCode = languageCodeNames.find(languageCode);

        if (iteratorCode == languageCodeNames.end())
        {
            languageName = languageIdentifier.substr(4);

            for (auto it = languageCodeNames.begin(); it != languageCodeNames.end(); ++it)
            {
                if (it->second == languageName)
                {
                    output = "Ya existe ese idioma: " + languageName;
                    error = true;
                    break;
                }
            }
        }
        else
        {
            output = "Ya existe un idioma con ese codigo: " + languageCode;
            error = true;
        }
    }
    else
    {
        output = "Formato de archivo incorrecto: " + languageIdentifier;
        error = true;
    }
    return !error;
}

bool compareTrigramByFreq(const vector<string> &first, const vector<string> &second)
{
    return stof(first[1]) > stof(second[1]);
}
/**
 * @file Lequel.cpp
 * @author Marc S. Ressl, Albertina Galan, Alejandro Nahuel Heir
 * @brief Language identification based on trigrams.
 * @version 0.1
 * @date 2022-03-29
 *
 * @copyright Copyright (c) 2022
 *
 * More info:
 * https://towardsdatascience.com/understanding-cosine-similarity-and-its-application-fd42f585296a
 *
 */

#include <cmath>
#include <codecvt>
#include <locale>
#include <iostream>
#include <algorithm>

#include "Lequel.h"

using namespace std;

/**
 * @brief Builds a trigram profile for a given text.
 *
 * @param text A list of lines (Text).
 * @return TrigramProfile
 */
TrigramProfile buildTrigramProfile(const Text &text)
{
    wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;

    TrigramProfile profile;

    for (auto x : text)
    {
        if (x.length() < 3)
            continue;

        wstring unicodeString = converter.from_bytes(x);

        for (int i = 0; i < unicodeString.length() - 2; i++)
        {
            wstring trigram = unicodeString.substr(i, 3);
            profile[converter.to_bytes(trigram)] += 1;
        }
    }

    return profile;
}

/**
 * @brief Normalizes a trigram profile.
 *
 * @param trigramProfile
 */
void normalizeTrigramProfile(TrigramProfile &trigramProfile)
{
    float accumulator = 0.0f;

    for (auto value : trigramProfile)
    {
        accumulator += value.second * value.second;
    }

    accumulator = sqrt(accumulator);

    for (auto &value : trigramProfile)
    {
        value.second /= accumulator;
    }

    return;
}

/**
 * @brief Calculates the cosine similarity between a text trigram profile
 * and a language trigram profile.
 *
 * @param textProfile Text trigram profile.
 * @param languageProfile Language trigram profile.
 * @return float, the cosine similarity score.
 */
float getCosineSimilarity(TrigramProfile &textProfile, TrigramProfile &languageProfile)
{
    float accumulator = 0.0f;
    for (auto textTrigram : textProfile)
    {
        auto iterator = languageProfile.find(textTrigram.first);

        if (iterator != languageProfile.end())
        {
            accumulator += iterator->second * textTrigram.second;
        }
    }

    return accumulator;
}

/**
 * @brief Identifies the language of a text.
 *
 * @param text A list of lines (Text).
 * @param languages
 * @return string, the language code of the most likely language.
 */
void identifyLanguage(const Text &text, Languages &languages, string *languagesMatched)
{
    float bestCosineSimilarity = 0.0f;
    float bestCosineSimilarities[3] = {0.0f, 0.0f, 0.0f};

    for (auto language : languages)
    {
        TrigramProfile testTrigramProfile = buildTrigramProfile(text);

        float actualCosineSimilarity = getCosineSimilarity(testTrigramProfile,
                                                           language.trigramProfile);

        if (actualCosineSimilarity > bestCosineSimilarities[0])
        {
            bestCosineSimilarities[2] = bestCosineSimilarities[1];
            languagesMatched[2] = languagesMatched[1];
            bestCosineSimilarities[1] = bestCosineSimilarities[0];
            languagesMatched[1] = languagesMatched[0];
            bestCosineSimilarities[0] = actualCosineSimilarity;
            languagesMatched[0] = language.languageCode;
        }
        else if (actualCosineSimilarity >= bestCosineSimilarities[1])
        {
            bestCosineSimilarities[2] = bestCosineSimilarities[1];
            languagesMatched[2] = languagesMatched[1];
            bestCosineSimilarities[1] = actualCosineSimilarity;
            languagesMatched[1] = language.languageCode;
        }
        else if (actualCosineSimilarity >= bestCosineSimilarities[2])
        {
            bestCosineSimilarities[2] = actualCosineSimilarity;
            languagesMatched[2] = language.languageCode;
        }
    }
}
/*
 * Lequel?
 *
 * Copyright (C) 2022 Marc S. Ressl
 *
 * Tests
 */

#include <iostream>
#include <string>

#include "Lequel.h"
#include "Text.h"

using namespace std;

void print(string s)
{
    cout << s;
}

int fail()
{
    cout << "FAIL" << endl;
    return 1;
}

int pass()
{
    cout << "PASS" << endl;
    return 0;
}

int main()
{
    Text text;

    TrigramProfile profile;
    TrigramProfile profile2;

    float value;

    Languages languages;
    Language language;

    print("buildTrigramProfile() works when text length is shorter than trigram length... ");
    getText("hi", text);
    profile = buildTrigramProfile(text);
    if (profile.size() != 0)
        return fail();
    pass();

    print("buildTrigramProfile() works when text length matches trigram length... ");
    getText("^_^", text);
    profile = buildTrigramProfile(text);
    if ((profile.size() != 1) ||
        (profile["^_^"] != 1))
        return fail();
    pass();

    print("buildTrigramProfile() works when text length is trigram length plus one... ");
    getText("meco", text);
    profile = buildTrigramProfile(text);
    if ((profile.size() != 2) ||
        (profile["mec"] != 1) ||
        (profile["eco"] != 1))
        return fail();
    pass();

    print("buildTrigramProfile() works with repeated characters... ");
    getText("aaaa", text);
    profile = buildTrigramProfile(text);
    if ((profile.size() != 1) ||
        (profile["aaa"] != 2))
        return fail();
    pass();

    print("buildTrigramProfile() works with non-ASCII characters... ");
    getText("áéí", text);
    profile = buildTrigramProfile(text);
    if ((profile.size() != 1) ||
        (profile["áéí"] != 1))
        return fail();
    pass();

    print("normalizeTrigramProfile() does not add or remove keys... ");
    profile.clear();
    profile["ABC"] = 1;
    profile["BCD"] = 1;
    profile["CDE"] = 1;
    profile["DEF"] = 1;
    normalizeTrigramProfile(profile);
    if (profile.size() != 4)
        return fail();
    pass();

    print("normalizeTrigramProfile() works with equal frequencies... ");
    profile.clear();
    profile["ABC"] = 1;
    profile["BCD"] = 1;
    profile["CDE"] = 1;
    profile["DEF"] = 1;
    normalizeTrigramProfile(profile);
    if ((profile["ABC"] != 0.5F) ||
        (profile["BCD"] != 0.5F) ||
        (profile["CDE"] != 0.5F) ||
        (profile["DEF"] != 0.5F))
        return fail();
    pass();

    print("normalizeTrigramProfile() works with different frequencies... ");
    profile.clear();
    profile["ABC"] = 4;
    profile["BCD"] = 3;
    normalizeTrigramProfile(profile);
    if ((profile["ABC"] != 0.8F) ||
        (profile["BCD"] != 0.6F))
        return fail();
    pass();

    print("normalizeTrigramProfile() works with large numbers... ");
    profile.clear();
    profile["ABC"] = 1E9;
    normalizeTrigramProfile(profile);
    if (profile["ABC"] != 1)
        return fail();
    pass();

    print("getCosineSimilarity() works with one shared key... ");
    profile.clear();
    profile2.clear();
    profile["ABC"] = 1;
    profile2["ABC"] = 1;
    value = getCosineSimilarity(profile, profile);
    if (value != 1)
        return fail();
    pass();

    print("getCosineSimilarity() works with non-overlapping keys... ");
    profile.clear();
    profile2.clear();
    profile["ABC"] = 1;
    profile2["BCD"] = 2;
    value = getCosineSimilarity(profile, profile2);
    if (value != 0)
        return fail();
    pass();

    print("getCosineSimilarity() works with keys present in textProfile but not languageProfile... ");
    profile.clear();
    profile2.clear();
    // These aren't normalized but we are just testing...
    profile["ABC"] = 1;
    profile["BCD"] = 2;
    profile["CDE"] = 3;
    profile2["BCD"] = 4;
    profile2["CDE"] = 5;
    value = getCosineSimilarity(profile, profile2);
    if (value != 23)
        return fail();
    pass();

    print("getCosineSimilarity() works with keys mising in both textProfile and languageProfile... ");
    profile.clear();
    profile2.clear();
    profile["BCD"] = 3;
    profile["CDE"] = 4;
    profile2["ABC"] = 4;
    profile2["BCD"] = 5;
    value = getCosineSimilarity(profile, profile2);
    if (value != 15)
        return fail();
    pass();

    print("identifyLanguage() works with perfect similarity... ");
    string languageCodes[3] = {"---", "---", "---"};
    languages.clear();
    language.languageCode = "L1";
    language.trigramProfile.clear();
    language.trigramProfile["ABC"] = 1;
    languages.push_back(language);
    language.languageCode = "L2";
    language.trigramProfile.clear();
    language.trigramProfile["BCD"] = 1;
    languages.push_back(language);
    language.languageCode = "L3";
    language.trigramProfile.clear();
    language.trigramProfile["CDE"] = 1;
    languages.push_back(language);
    language.languageCode = "L4";
    language.trigramProfile.clear();
    language.trigramProfile["DEF"] = 1;
    languages.push_back(language);
    getText("CDE", text);
    identifyLanguage(text, languages, languageCodes);
    if (languageCodes[0] != "L3")
        return fail();
    pass();

    return 0;
}
/**
 * @file LanguageManager_test.cpp
 * @author Albertina Galan, Alejandro Nahuel Heir
 * @brief Tests del administrador de lenguajes
 * @version 0.1
 * @date 2022-04-01
 *
 * @copyright Copyright (c) 2022
 *
 */

#include <iostream>
#include <string>

#include "Lequel.h"
#include "Text.h"
#include "LanguageManager.h"

using namespace std;

void print(string s)
{
    cout << s;
}

int fail()
{
    cout << "FAIL" << endl;
    return 1;
}

int pass()
{
    cout << "PASS" << endl;
    return 0;
}

int main()
{
    Text text;

    TrigramProfile profile1;
    TrigramProfile profile2;
    vector<string> keys1, keys2;
    vector<float> values1, values2;

    profile1["aaa"] = 10.0f;
    profile2["aaa"] = 5.0f;
    profile1["bbb"] = 20.0f;
    profile2["bbb"] = 50.0f;
    profile1["ccc"] = 10.0f;
    profile2["ddd"] = 10.0f;
    for (auto value : profile1)
    {
        keys1.push_back(value.first);
        values1.push_back(value.second);
    }
    for (auto value : profile2)
    {
        keys2.push_back(value.first);
        values2.push_back(value.second);
    }

    print("compareTrigramByFreq() works when first freq is greater than second freq... ");
    if (!compareTrigramByFreq({keys1[0], to_string(values1[0])}, {keys2[0], to_string(values2[0])}))
        fail();
    pass();

    print("compareTrigramByFreq() works when second freq is greater than first freq... ");
    if (compareTrigramByFreq({keys1[1], to_string(values1[1])}, {keys2[1], to_string(values2[1])}))
        fail();
    pass();

    print("compareTrigramByFreq() works when both first and second freq are the same... ");
    if (compareTrigramByFreq({keys1[1], to_string(values1[1])}, {keys2[1], to_string(values2[1])}))
        fail();
    pass();

    return 0;
}
/*
 * Reads and writes CSV files
 *
 * Copyright (C) 2022 Marc S. Ressl
 */

#include <fstream>

#include "CSVData.h"

using namespace std;

bool readCSV(const string path, CSVData &data)
{
    ifstream file(path);

    if (!file.is_open())
        return false;

    file.seekg(0, ios::end);
    int fileSize = file.tellg();
    char *fileData = new char[fileSize];
    file.seekg(0);
    file.read(&fileData[0], fileSize);

    bool inQuotes = false;
    bool lastQuote = false;

    string field;
    vector<string> fields;

    for (int i = 0; i < fileSize; i++)
    {
        char c = fileData[i];

        if (lastQuote && c != '"')
            inQuotes = !inQuotes;

        if (c == '"')
        {
            if (lastQuote)
            {
                field += c;
                lastQuote = false;
            }
            else
                lastQuote = true;
        }
        else if (c == ',')
        {
            if (inQuotes)
                field += c;
            else
            {
                fields.push_back(field);
                field.clear();
            }

            lastQuote = false;
        }
        else if ((c == '\n') || (c == '\r'))
        {
            if (field.size())
                fields.push_back(field);
            field.clear();

            if (fields.size())
                data.push_back(fields);
            fields.clear();

            inQuotes = false;
            lastQuote = false;
        }
        else
        {
            field += c;
            lastQuote = false;
        }
    }

    if (field.size())
        fields.push_back(field);
    if (fields.size())
        data.push_back(fields);

    delete[] fileData;

    return true;
}

bool writeCSV(const string path, CSVData &data)
{
    ofstream file(path);

    if (!file.is_open())
        return false;

    for (auto fields : data)
    {
        string line;

        bool isFirstField = true;
        for (auto field : fields)
        {
            if (!isFirstField)
                line += ',';
            else
                isFirstField = false;

            // Replaces " with ""
            size_t pos = 0;
            while ((pos = field.find('"', pos)) != std::string::npos)
            {
                field.replace(pos, 1, "\"\"");
                pos += 2;
            }

            line += '"' + field + '"';
        }

        line += '\n';

        file.write(line.c_str(), line.size());

        if (!file.good())
            return false;
    }

    return true;
}
/**
 * @file Lequel.h
 * @author Marc S. Ressl, Albertina Galan, Alejandro Nahuel Heir
 * @brief Language identification based on trigrams.
 * @version 0.1
 * @date 2022-03-29
 *
 * @copyright Copyright (c) 2022
 *
 */

#ifndef _LEQUEL_H
#define _LEQUEL_H

#include <list>
#include <map>
#include <string>

#include "Text.h"

// TrigramProfile: Map of trigram -> frequency
typedef std::map<std::string, float> TrigramProfile;

// TrigramList: list of trigrams
typedef std::list<std::string> TrigramList;

class Language
{
public:
    std::string languageCode;
    TrigramProfile trigramProfile;
};

typedef std::list<Language> Languages;

// Functions
TrigramProfile buildTrigramProfile(const Text &text);

void normalizeTrigramProfile(TrigramProfile &trigramProfile);

float getCosineSimilarity(TrigramProfile &textProfile, TrigramProfile &languageProfile);

void identifyLanguage(const Text &text, Languages &languages, std::string *languagesMatched);

#endif
/**
 * @file LanguageManager.h
 * @author Marc S. Ressl, Albertina Galan, Alejandro Nahuel Heir
 * @brief Administrador de lenguajes, para agregarlos y detectar existentes.
 * @version 0.1
 * @date 2022-03-29
 *
 * @copyright Copyright (c) 2022
 *
 */

#include <map>
#include <vector>

#include "Lequel.h"
#include "Text.h"
#include "CSVData.h"

/*
 * Loads trigram data.
 *
 * Parameters:
 *  languageCodeNames -     Map of language code vs. language name (in user's locale).
 *  trigramProfiles -       The trigram profiles.
 *
 * Returns: whether the function succeeded.
 */
bool loadLanguagesData(std::map<std::string, std::string> &languageCodeNames,
                       Languages &languages);

/**
 * @brief
 *
 * @param text
 * @param languageCodeNames
 * @param languages
 * @param languageCode
 * @param languageName
 * @param result
 */
void addLanguage(const Text &text, std::map<std::string, std::string> &languageCodeNames,
                 Languages &languages, const std::string &languageCode,
                 const std::string &languageName, std::string &result);

/**
 * @brief
 *
 * @param languageCodeNames
 * @param languageIdentifier
 * @param languageCode
 * @param languageName
 * @param output
 * @return true Posible agregarlo
 * @return false Imposible agregarlo
 */
bool verifyNewLanguage(const std::map<std::string, std::string> &languageCodeNames,
                       const std::string &languageIdentifier, std::string &languageCode,
                       std::string &languageName, std::string &output);

/**
 * @brief Criterio de comparación para ordenar lista CSV, con trigramas y frecuencias
 *
 * @param first Vector de strings con {trigama, frecuencia}
 * @param second Vector de strings con {trigama, frecuencia}
 * @return true, first tiene mayor frecuencia que second
 * @return false, first tiene menor frecuencia que second
 */
bool compareTrigramByFreq(const std::vector<std::string> &first,
                          const std::vector<std::string> &second);
